---
# SPDX-FileCopyrightText: (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

name: "trivy test"
run-name: "trivy test"


# Only run at most 1 workflow concurrently per PR, unlimited for branches
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.event.pull_request.number || github.sha }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

on:
  workflow_dispatch:

jobs:   

  trivy-scan-job:
    permissions:
      contents: read
      packages: read          # needed for actions/checkout
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          persist-credentials: false  

      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@main
        with:
          # 以下是可选的清理配置（默认全部开启）
          tool-cache: true    # 清理工具缓存(约6GB)
          android: true       # 清理Android SDK(约12GB)
          dotnet: true        # 清理.NET(约1GB)
          haskell: true       # 清理Haskell(约1GB)
          large-packages: true # 清理大包(约5GB)
          docker-images: true # 清理Docker镜像(约4GB)
          swap-storage: true  # 清理交换空间(约2GB)
      - name: Free Disk Space
        # You may pin to the exact commit or the version.
        # uses: ShubhamTatvamasi/free-disk-space-action@01128c655592f81375a0e0bb73d80031a2b44762
        uses: ShubhamTatvamasi/free-disk-space-action@1.0.0
          
      - name: Install Trivy from Aqua Security APT repo
        run: |
          sudo apt-get update
          sudo apt-get install -y gnupg lsb-release wget apt-transport-https curl jq
          curl -fsSL https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo gpg --dearmor -o /usr/share/keyrings/trivy.gpg
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -cs) main" | \
          sudo tee /etc/apt/sources.list.d/trivy.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y trivy
      - name: Trivy filesystem/repo scan
        continue-on-error: true
        shell: bash
        run: |
          pwd
          cd metro-ai-suite/
          trivy --version
          which trivy
          trivy image --download-db-only
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl -o trivy-html.tpl
          cat << 'EOF' > csv.tpl
          {{ range . }}
          Trivy Vulnerability Scan Results ({{- .Target -}})
          VulnerabilityID,Severity,CVSS Score,Title,Library,Vulnerable Version,Fixed Version,Information URL,Triage Information
          {{ range .Vulnerabilities }}
              {{- .VulnerabilityID }},
              {{- .Severity }},
              {{- range $key, $value := .CVSS }}
                  {{- if (eq $key "nvd") }}
                      {{- .V3Score -}}
                  {{- end }}
              {{- end }},
              {{- quote .Title }},
              {{- quote .PkgName }},
              {{- quote .InstalledVersion }},
              {{- quote .FixedVersion }},
              {{- .PrimaryURL }}
          {{ else -}}
              No vulnerabilities found at this time.
          {{ end }}
          Trivy Dependency Scan Results ({{ .Target }})
          ID,Name,Version,Notes
          {{ range .Packages -}}
              {{- quote .ID }},
              {{- quote .Name }},
              {{- quote .Version }}
          {{ else -}}
              No dependencies found at this time.
          {{ end }}
          {{ end }}
          EOF

          # Use the downloaded template
          trivy fs . --format template --template "@trivy-html.tpl" -o "trivy_fs_full_report_code_scan.html" 
          trivy fs --list-all-pkgs --format template --template "@csv.tpl" --output trivy-fs-full-report.csv .
          trivy fs --ignore-unfixed . | tee trivy-fs-full-report-ignore-unfixed.txt  
      
      - name: Trivy Image Scan
        continue-on-error: true
        shell: bash
        run: |
              echo "Building Image and scanning Image"
              git clone https://github.com/open-edge-platform/edge-ai-libraries.git
              cd edge-ai-libraries/microservices
              docker build -t dataprep-visualdata-milvus:latest --build-arg https_proxy=$https_proxy --build-arg http_proxy=$http_proxy --build-arg no_proxy=$no_proxy -f visual-data-preparation-for-retrieval/milvus/src/Dockerfile .
              docker build -t retriever-milvus:latest --build-arg https_proxy=$https_proxy --build-arg http_proxy=$http_proxy --build-arg no_proxy=$no_proxy -f vector-retriever/milvus/src/Dockerfile .
              cd vlm-openvino-serving
              docker build -t vlm-openvino-serving:latest --build-arg https_proxy=$https_proxy --build-arg http_proxy=$http_proxy --build-arg no_proxy=$no_proxy -f docker/Dockerfile .
              cd ../../..
              cd metro-ai-suite
              docker build -t visual-search-qa-app:latest --build-arg https_proxy=$https_proxy --build-arg http_proxy=$http_proxy --build-arg no_proxy=$no_proxy -f visual-search-question-and-answering/src/Dockerfile .
              docker images

              trivy image dataprep-visualdata-milvus:latest --ignore-unfixed --format template --template "@trivy-html.tpl" -o trivy_image_scan_dataprep_server.html
              trivy image dataprep-visualdata-milvus:latest --ignore-unfixed --format template --template "@csv.tpl" -o trivy_image_scan_dataprep_server.csv
              trivy image --quiet --format spdx-json --output trivy_image_scan_dataprep_server.spdx.json dataprep-visualdata-milvus:latest

              trivy image retriever-milvus:latest --ignore-unfixed --format template --template "@trivy-html.tpl" -o trivy_image_scan_retriever_server.html
              trivy image retriever-milvus:latest --ignore-unfixed --format template --template "@csv.tpl" -o trivy_image_scan_retriever_server.csv
              trivy image --quiet --format spdx-json --output trivy_image_scan_retriever_server.spdx.json retriever-milvus:latest
              
              trivy image vlm-openvino-serving:latest --ignore-unfixed --format template --template "@trivy-html.tpl" -o trivy_image_scan_vlm_server.html
              trivy image vlm-openvino-serving:latest --ignore-unfixed --format template --template "@csv.tpl" -o trivy_image_scan_vlm_server.csv
              trivy image --quiet --format spdx-json --output trivy_image_scan_vlm_server.spdx.json vlm-openvino-serving:latest

              trivy image visual-search-qa-app:latest --ignore-unfixed --format template --template "@trivy-html.tpl" -o trivy_image_scan_visual_server.html
              trivy image visual-search-qa-app:latest --ignore-unfixed --format template --template "@csv.tpl" -o trivy_image_scan_visual_server.csv
              trivy image --quiet --format spdx-json --output trivy_image_scan_visual_server.spdx.json visual-search-qa-app:latest
              
              echo "completed Wind Turbine Sample App Image scanning"
      - name: Debug working directory
        run: |
          echo "Current directory: $(pwd)"
          ls -R metro-ai-suite/ | grep trivy || echo "No trivy files found"

      - name: Upload Trivy Image Scan Report
        continue-on-error: true
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Trivy Scan report fs and image
          path: ${{ github.workspace }}/metro-ai-suite/trivy*

      # - name: Trivy config scan for helm charts 
      #   run: |
      #     cd manufacturing-ai-suite/wind-turbine-anomaly-detection/
      #     make gen_helm_charts
      #     cd helm
      #     trivy config . >> trivy_helm.txt
          
      # - name: Upload Scan artifact to Github
      #   uses: actions/upload-artifact@v4
      #   with:

  setup-repos:
    runs-on: ubuntu-latest
    steps:
      - name: clone libraries
        continue-on-error: true
        shell: bash
        run: |
              git clone https://github.com/open-edge-platform/edge-ai-libraries.git

  scan-visual-dockerfile:
    needs: setup-repos
    permissions:
      contents: read
      packages: read
    uses: open-edge-platform/edge-ai-libraries/.github/workflows/trivy-config-mode.yaml@main
    with:
      dockerfile-path: metro-ai-suite/visual-search-question-and-answering/src/Dockerfile
      trivy-report-format: 'json'
      severity-levels: 'HIGH,CRITICAL'
      output-report-path: trivy-visual-dockerfile.json

  scan-dataprep-dockerfile:
    needs: setup-repos
    permissions:
      contents: read
      packages: read
    uses: open-edge-platform/edge-ai-libraries/.github/workflows/trivy-config-mode.yaml@main
    with:
      dockerfile-path: edge-ai-libraries/microservices/visual-data-preparation-for-retrieval/milvus/src/Dockerfile
      trivy-report-format: 'json'
      severity-levels: 'HIGH,CRITICAL'
      output-report-path: trivy-dataprep-dockerfile.json

  scan-retriever-dockerfile:
    needs: setup-repos
    permissions:
      contents: read
      packages: read
    uses: open-edge-platform/edge-ai-libraries/.github/workflows/trivy-config-mode.yaml@main
    with:
      dockerfile-path: edge-ai-libraries/microservices/vector-retriever/milvus/src/Dockerfile
      trivy-report-format: 'json'
      severity-levels: 'HIGH,CRITICAL'
      output-report-path: trivy-retriever-dockerfile.json

  scan-vlm-dockerfile:
    needs: setup-repos
    permissions:
      contents: read
      packages: read
    uses: open-edge-platform/edge-ai-libraries/.github/workflows/trivy-config-mode.yaml@main
    with:
      dockerfile-path: edge-ai-libraries/microservices/vlm-openvino-serving/docker/Dockerfile
      trivy-report-format: 'json'
      severity-levels: 'HIGH,CRITICAL'
      output-report-path: trivy-vlm-dockerfile.json
